name: Build and Package Electron App

on:
  push:
    branches:
      - main

jobs:
  build_and_package:
    strategy:
      matrix:
        include:
          - os: macos-latest
            # arch: x64
          # - os: macos-latest-xlarge
          # arch: arm64
          - os: windows-latest
          - os: ubuntu-latest

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Cache TypeScript build
        uses: actions/cache@v3
        with:
          path: ./dist
          key: ${{ runner.os }}-tsc-${{ hashFiles('**/tsconfig.json') }}
          restore-keys: |
            ${{ runner.os }}-tsc-

      - name: Install dependencies
        run: npm install

      - name: Set up environment for macOS build
        if: matrix.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID_PASS }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # If you use GitHub token for auto-update
        run: |
          npm run build

      # - name: Build app
      #   run: npm run build

      # Specific step for Linux builds
      - name: Run Linux Specific Command
        if: matrix.os == 'ubuntu-latest'
        run: npx --no node-llama-cpp download

      - name: Set version as env
        run: echo "APP_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Print APP_VERSION
        run: echo "APP_VERSION=${{ env.APP_VERSION }}"

      - name: Rename artifacts for ARM architecture
        if: matrix.os == 'macos-latest-xlarge'
        run: |
          mv ./release/${{ env.APP_VERSION }}/*.dmg ./release/${{ env.APP_VERSION }}/reor-project_${{ env.APP_VERSION }}-arm64.dmg

      - name: Rename artifacts for Intel architecture
        if: matrix.os == 'macos-latest'
        run: |
          mv ./release/${{ env.APP_VERSION }}/*.dmg ./release/${{ env.APP_VERSION }}/reor-project_${{ env.APP_VERSION }}-intel.dmg

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-app
          path: |
            ./release/*/*.exe
            ./release/${{ env.APP_VERSION }}/**/*.AppImage
            ./release/${{ env.APP_VERSION }}/*-arm64.dmg
            ./release/${{ env.APP_VERSION }}/*-intel.dmg
